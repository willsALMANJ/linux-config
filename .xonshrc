# NOTE: TERM needs to be set to avoid errors coloring the prompt.
# For Konsole, the following command can be used to give a relatively clean
# xonsh environment:
# env -i HOME=$HOME TERM=screen-256color bash -c "source /etc/profile && $HOME/conda/bin/xonsh"
$XONSH_SHOW_TRACEBACK = True
$XONSH_TRACEBACK_LOGFILE = $HOME + "/tmp/xonsh.log"

# XONSH WEBCONFIG START
$XONSH_GITSTATUS_STASHED = ""
$PROMPT = '{env_name}{BOLD_GREEN}{user}@{hostname}{BOLD_BLUE} {cwd_base}{branch_color}{gitstatus: {}}{NO_COLOR} {BOLD_BLUE}{prompt_end}{NO_COLOR} '
$XONSH_COLOR_STYLE = 'solarized-dark'
xontrib load autojump
# XONSH WEBCONFIG END

$CASE_SENSITIVE_COMPLETIONS = 0

$UID = $(id -u).strip()
$PATH = (
    [
        p
        for p in [$HOME + "/bin", $HOME + "/.local/share/npm/bin", $HOME + "/.local/bin"]
        if p not in $PATH
    ] +
    $PATH
)

aliases["ll"] = "ls -l"
aliases["emacsc"] = "emacsclient -nw"
aliases["gdiff"] = "git difftool -t vimdiff"
aliases["pyadm"] = "yadm --yadm-dir $HOME/.pyadm"
def _source_bash(args, stdin, stdout, stderr):
    shlvl = $SHLVL
    aliases["source-foreign"](
        [
            "bash",
            "--sourcer=source",
            "--extra-args=--norc",
        ] + args,
        stdin,
        stdout,
        stderr,
    )
    $SHLVL = shlvl
aliases["source-bash"] = _source_bash
# See https://askubuntu.com/questions/1215100/kde-konsole-shortcut-to-launch-new-tab-with-different-profile
aliases["ktab"] = "qdbus $KONSOLE_DBUS_SERVICE $KONSOLE_DBUS_WINDOW newSession"

def _emacs_server(args):
    if "-k" in args:
        print("Stopping emacs server")
        emacsclient -e "(kill-emacs)"
        return
    emacs_running = $(pgrep -ax -u $UID emacs)
    if emacs_running:
        print("emacs already running, not starting server")
    else:
       emacs --chdir $HOME --daemon -l $HOME/.emacs.d/desktop_save.el 
aliases["emacs-server"] = _emacs_server

xontrib load fzf-widgets
$FZF_DEFAULT_COMMAND = 'ag --nocolor -l -g ""'
$fzf_history_binding = "c-r"
$fzf_ssh_binding = None
$fzf_file_binding = "c-t"
$fzf_dir_binding = None

# gpg
$GPG_TTY = $(tty)

# TODO: work when xonsh is not in conda base environment?
# Set up conda (and xonsh somewhat since it is in the conda environment)
import sys as _sys
from types import ModuleType as _ModuleType
_mod = _ModuleType("xontrib.conda", "Modified from $(conda shell.xonsh hook)")
__xonsh__.execer.exec(
    $(@(__xonsh__.env["HOME"] + "/conda/bin/conda") "shell.xonsh" "hook"),
    glbs=_mod.__dict__,
    filename="$(@(" + __xonsh__.env["HOME"] + "+ '/conda/bin/conda') shell.xonsh hook)"
)
_sys.modules["xontrib.conda"] = _mod
del _sys, _mod, _ModuleType

if p"$HOME/.xonshrc_local".exists():
    source "$HOME/.xonshrc_local"

import sys as _sys
_xonsh_arg = [a for a in _sys.argv if "xonsh" in a]
if _xonsh_arg:
    $SHELL = _xonsh_arg[0]
del _sys, _xonsh_arg
